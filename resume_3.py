# -*- coding: utf-8 -*-
"""resume_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p26qmWgoBoTZ78Fegy1JE9mbvSP37RoR
"""

import streamlit as st
import docx
from docx.enum.text import WD_ALIGN_PARAGRAPH

st.set_page_config(layout='wide')

def main():
    st.title('Resume Builder App')
    doc = docx.Document()

 # Add personal information
    st.header("Personnal information")
    name = st.text_input("Enter your name")
    #doc.add_heading(name, 0)
    
    address = st.text_input("Enter your address")
    phone = st.text_input("Enter your phone number")
    email = st.text_input("Enter your email address")
    links = st.text_input("Enter any relevant links ")
    objective_summary = st.text_input("Enter your objective/summary ")

    doc.add_heading(f"{name}", 0)
    p = doc.add_paragraph()
    p.add_run(f'{phone}\n')  
    p.add_run(f'{address}\n')
    p.add_run(f'{email}\n')
    p.add_run(f'{links}')

# add a section with a heading
    doc.add_heading('Objective Summary', level=1)
    doc.add_paragraph(f'{objective_summary }')

# Add education information
    st.header("Education")
    degree = st.text_input(f"Enter your highlest degree ")
    major = st.text_input(f"Enter major ")
    institute = st.text_input(f"Enter institute ")
    start_date = st.text_input(f"Enter start date ")
    end_date = st.text_input(f"Enter end date ")
    doc.add_heading('Education', level=1)
    if degree and major and institute and start_date and end_date:
          education = doc.add_paragraph()
          education.add_run(f"{degree}\n").bold = True
          education.add_run(f"{major}\n")
          education.add_run(f"{institute}, {start_date} - {end_date}\n")

# Add skills section
    st.header("Skills")
    skills = st.text_input("Enter your skills (comma-separated)")
    doc.add_heading('Skills', level=1)
    doc.add_paragraph(f'{skills}')
        
# Add work experience
    st.header("Work Experience")
    doc.add_heading('Work Experience', level=1)
    for i in range(st.number_input("Enter number of work experiences", 1, 10)):
         title = st.text_input(f"Enter title {i+1}")
         company = st.text_input(f"Enter company {i+1}",key=f"company-{i+1}")
         start_date = st.text_input(f"Enter start date {i+1}", key=f"start-date-{i+1}")
         end_date = st.text_input(f"Enter end date or currently working here is employment continue {i+1}", key=f"end-date-{i+1}")
         description1 = st.text_input(f"Enter job description {i+1}", key=f"description1-{i+1}")
         if title and company and start_date and end_date and description1:
                 work = doc.add_paragraph()
                 work.add_run(f"{title}\n").bold = True
                 work.add_run(f"{company}, {start_date} - {end_date}\n")
                 work.add_run(description1 + "\n\n")
    
# Certifications/courses
    st.header("certifications")
    doc.add_heading('Certifications', level=1)
    for i in range(st.number_input("Enter number of certifications", 1, 10)):
         certification_title = st.text_input(f"Enter certification name {i+1}", key = f"certification_title-{i+1}")
         start_ = st.text_input(f"Enter start date {i+1}", key=f"start_-{i+1}")
         end_ = st.text_input(f"Enter end date {i+1}", key=f"end_-{i+1}")
         certification_description = st.text_input(f"Enter certification description {i+1}", key=f"certification_description-{i+1}")
        
         if certification_title and start_ and end_ and certification_description :
                 work = doc.add_paragraph()
                 work.add_run(f"{certification_title}\n").bold = True
                 work.add_run(f"{start_} - {end_}\n")
                 work.add_run(certification_description + "\n\n")

# Awards
    st.header("awards")
    doc.add_heading('Awards', level=1) 
    for i in range(st.number_input("Enter number of awards", 1, 10)):
         award_title = st.text_input(f"Enter award name {i+1}", key = f"award_title-{i+1}")
         award_link = st.text_input(f"Enter award link {i+1}", key=f"award_link-{i+1}")
         award_description = st.text_input(f"Enter award description {i+1}", key=f"award_description-{i+1}")
        
         if award_title and award_link and award_description :
                 work = doc.add_paragraph()
                 work.add_run(f"{award_title}\n").bold = True
                 work.add_run(f"{award_link}\n")
                 work.add_run(award_description + "\n\n")

# Projects
    st.header("projects")
    doc.add_heading('Projects', level=1)
    for i in range(st.number_input("Enter number of projects", 1, 10)):
         project_title = st.text_input(f"Enter project name {i+1}", key = f"project_title-{i+1}")
         project_link = st.text_input(f"Enter project link {i+1}", key=f"project_link-{i+1}")
         project_description = st.text_input(f"Enter project description {i+1}", key=f"project_description-{i+1}")
         
         if project_title and project_link and project_description :
                 work = doc.add_paragraph()
                 work.add_run(f"{project_title}\n").bold = True
                 work.add_run(f"{project_link}\n")
                 work.add_run(project_description + "\n\n")

    doc.save(f"{name}_Resume.docx")



# Download Docx file
    def download():
       doc.save(f"{name}_Resume.docx")
       with open(f"{name}_Resume.docx", "rb") as f:
           result = f.read()
       st.download_button(
            label="Download your Resume",
            data=result,
            file_name=f"{name}_Resume.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            )

    if st.button("Generate Resume"):
         download()

if __name__ == '__main__':
  main() 